// Mocks generated by Mockito 5.4.4 from annotations
// in ubicameapp/test/services/geopoint_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i7;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/annotations.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_1 extends _i1.SmartFake
    implements _i4.CollectionReference<Map<String, dynamic>> {
  _FakeCollectionReference_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_2 extends _i1.SmartFake
    implements _i4.DocumentReference<Map<String, dynamic>> {
  _FakeDocumentReference_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_3 extends _i1.SmartFake
    implements _i4.QuerySnapshot<Map<String, dynamic>> {
  _FakeQuerySnapshot_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryDocumentSnapshot_4 extends _i1.SmartFake
    implements _i4.QueryDocumentSnapshot<Map<String, dynamic>> {
  _FakeQueryDocumentSnapshot_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i4.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(String path) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [path],
        ),
        returnValue: _FakeCollectionReference_1(
          this,
          Invocation.method(
            #collection,
            [path],
          ),
        ),
      ) as _i4.CollectionReference<Map<String, dynamic>>);

  @override
  _i4.DocumentReference<Map<String, dynamic>> doc(String path) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_2(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i4.DocumentReference<Map<String, dynamic>>);

  @override
  _i5.Future<T> runTransaction<T>(
    _i4.TransactionHandler<T> handler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [handler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i5.Future<T>.value(),
      ) as _i5.Future<T>);

  @override
  _i5.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i5.Stream<void>.empty(),
      ) as _i5.Stream<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionReference extends _i1.Mock
    implements _i4.CollectionReference<Map<String, dynamic>> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DocumentReference<Map<String, dynamic>> doc([String? path]) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_2(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i4.DocumentReference<Map<String, dynamic>>);

  @override
  _i5.Future<_i4.DocumentReference<Map<String, dynamic>>> add(
          Map<String, dynamic> value) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue:
            _i5.Future<_i4.DocumentReference<Map<String, dynamic>>>.value(
                _FakeDocumentReference_2(
          this,
          Invocation.method(
            #add,
            [value],
          ),
        )),
      ) as _i5.Future<_i4.DocumentReference<Map<String, dynamic>>>);

  @override
  _i5.Stream<_i4.QuerySnapshot<Map<String, dynamic>>> snapshots(
          {bool? includeMetadataChanges = false,
          _i4.ListenSource? source = _i4.ListenSource.defaultSource}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue:
            _i5.Stream<_i4.QuerySnapshot<Map<String, dynamic>>>.empty(),
      ) as _i5.Stream<_i4.QuerySnapshot<Map<String, dynamic>>>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentReference extends _i1.Mock
    implements _i4.DocumentReference<Map<String, dynamic>> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> set(
    Map<String, dynamic> data, [
    _i4.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [data, options],
        ),
        returnValue: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> update(Map<Object, Object?> data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot extends _i1.Mock
    implements _i4.QuerySnapshot<Map<String, dynamic>> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.QueryDocumentSnapshot<Map<String, dynamic>>> get docs =>
      (super.noSuchMethod(
        Invocation.getter(#docs),
        returnValue: <_i4.QueryDocumentSnapshot<Map<String, dynamic>>>[],
      ) as List<_i4.QueryDocumentSnapshot<Map<String, dynamic>>>);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot extends _i1.Mock
    implements _i4.QueryDocumentSnapshot<Map<String, dynamic>> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> data() => (super.noSuchMethod(
        Invocation.method(
          #data,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
